{% comment %}
{
  "name": "Product Carousel",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "carousel_title",
      "label": "Carousel Title",
      "default": "You may also like"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Products to display",
      "limit": 10
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_pagination",
      "label": "Show pagination dots",
      "default": true
    }
  ]
}
{% endcomment %}

<div class="product-carousel-widget" data-carousel-id="carousel-{{ block.id }}">
  <div class="carousel-header">
    <h3 class="carousel-title">{{ block.settings.carousel_title }}</h3>
    {% if block.settings.show_navigation %}
      <div class="carousel-navigation">
        <button class="nav-arrow nav-prev" data-direction="prev">‹</button>
        <button class="nav-arrow nav-next" data-direction="next">›</button>
      </div>
    {% endif %}
  </div>
  
  <div class="carousel-container">
    <div class="carousel-track" data-carousel-track>
      {% for product in block.settings.products limit: 10 %}
        <div class="carousel-slide">
          <div class="product-card">
            {% if product.featured_image %}
              <img src="{{ product.featured_image | img_url: '200x200' }}" 
                   alt="{{ product.title }}" 
                   class="product-image"
                   loading="lazy">
            {% endif %}
            
            <div class="product-info">
              <h4 class="product-title">{{ product.title }}</h4>
              
              <div class="product-pricing">
                {% if product.compare_at_price > product.price %}
                  <span class="price-original">{{ product.compare_at_price | money }}</span>
                  <span class="price-sale">{{ product.price | money }}</span>
                  {% assign discount_percent = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
                  <span class="sale-badge">{{ discount_percent | round }}% OFF</span>
                {% else %}
                  <span class="price-regular">From {{ product.price | money }}</span>
                {% endif %}
              </div>
              
              {% if product.variants.size > 1 %}
                <div class="product-options">
                  {% for variant in product.variants limit: 2 %}
                    <button class="variant-option" data-variant-id="{{ variant.id }}">
                      {{ variant.title }}
                    </button>
                  {% endfor %}
                </div>
              {% endif %}
              
              {% assign available_variant = product.selected_or_first_available_variant %}
              {% if available_variant %}
                <button class="add-to-cart-btn{% if forloop.index > 3 %} plus{% endif %}" 
                        data-product-id="{{ product.id }}"
                        data-variant-id="{{ available_variant.id }}"
                        data-variant-title="{{ available_variant.title }}"
                        data-product-title="{{ product.title }}">
                  {% if forloop.index > 3 %}+ {% endif %}Add
                </button>
              {% else %}
                <button class="add-to-cart-btn disabled" disabled>
                  Sold Out
                </button>
              {% endif %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
  
  {% if block.settings.show_pagination %}
    <div class="carousel-pagination" data-carousel-pagination>
      {% for product in block.settings.products limit: 10 %}
        <button class="pagination-dot" data-slide="{{ forloop.index0 }}"></button>
      {% endfor %}
    </div>
  {% endif %}
</div>

<style>
.product-carousel-widget {
  margin: 24px 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
  background: #f5f5f5;
  border-radius: 8px;
  padding: 20px;
}

.carousel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.carousel-title {
  font-size: 18px;
  font-weight: 600;
  margin: 0;
  color: #333;
}

.carousel-navigation {
  display: flex;
  gap: 8px;
}

.nav-arrow {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  background: white;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  color: #666;
  transition: all 0.2s ease;
}

.nav-arrow:hover {
  background: #f5f5f5;
  border-color: #999;
}

.carousel-container {
  overflow: hidden;
  position: relative;
}

.carousel-track {
  display: flex;
  transition: transform 0.3s ease;
}

.carousel-slide {
  flex: 0 0 100%;
  margin-right: 0;
}

.product-card {
  background: white;
  border-radius: 8px;
  padding: 16px;
  height: 100%;
  display: flex;
  flex-direction: column;
  max-width: 300px;
  margin: 0 auto;
}

.product-image {
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-radius: 4px;
  margin-bottom: 12px;
  background: #f8f9fa;
}

.product-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  position: relative;
}

.product-title {
  font-size: 14px;
  font-weight: 500;
  margin: 0 0 8px 0;
  color: #333;
  text-align: center;
}

.product-pricing {
  margin-bottom: 8px;
  text-align: center;
}

.price-original {
  text-decoration: line-through;
  color: #999;
  font-size: 12px;
  margin-right: 8px;
}

.price-sale, .price-regular {
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.sale-badge {
  display: inline-block;
  background: #10b981;
  color: white;
  font-size: 11px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 4px;
  margin-left: 8px;
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.product-options {
  display: flex;
  gap: 4px;
  margin-bottom: 12px;
  justify-content: center;
}

.variant-option {
  padding: 4px 8px;
  border: 1px solid #ddd;
  background: white;
  border-radius: 4px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  color: #007bff;
}

.variant-option:hover, .variant-option.selected {
  border-color: #007bff;
  background: #f0f8ff;
  color: #007bff;
}

.add-to-cart-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  position: absolute;
  bottom: 0;
  right: 0;
  transition: background 0.2s ease;
}

.add-to-cart-btn:hover {
  background: #0056b3;
}

.add-to-cart-btn.plus {
  background: #6c757d;
  font-size: 13px;
}

.add-to-cart-btn.plus:hover {
  background: #5a6268;
}

.add-to-cart-btn:disabled,
.add-to-cart-btn.disabled {
  background: #9ca3af !important;
  cursor: not-allowed;
  opacity: 0.6;
}

.add-to-cart-btn:disabled:hover,
.add-to-cart-btn.disabled:hover {
  background: #9ca3af !important;
}

.carousel-pagination {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 16px;
}

.pagination-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  border: none;
  background: #ddd;
  cursor: pointer;
  transition: background 0.2s ease;
}

.pagination-dot.active {
  background: #007bff;
}

@media (max-width: 768px) {
  .carousel-title {
    font-size: 16px;
  }
  
  .product-carousel-widget {
    padding: 16px;
  }
  
  .product-card {
    max-width: 240px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const carousel = document.querySelector('[data-carousel-id="carousel-{{ block.id }}"]');
  if (!carousel) return;
  
  const track = carousel.querySelector('[data-carousel-track]');
  const slides = carousel.querySelectorAll('.carousel-slide');
  const prevBtn = carousel.querySelector('.nav-prev');
  const nextBtn = carousel.querySelector('.nav-next');
  const dots = carousel.querySelectorAll('.pagination-dot');
  
  let currentSlide = 0;
  const maxSlide = Math.max(0, slides.length - 1);
  
  function updateCarousel() {
    const translateX = -currentSlide * 100;
    track.style.transform = `translateX(${translateX}%)`;
    
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentSlide);
    });
  }
  
  function nextSlide() {
    currentSlide = Math.min(currentSlide + 1, maxSlide);
    updateCarousel();
  }
  
  function prevSlide() {
    currentSlide = Math.max(currentSlide - 1, 0);
    updateCarousel();
  }
  
  if (nextBtn) nextBtn.addEventListener('click', nextSlide);
  if (prevBtn) prevBtn.addEventListener('click', prevSlide);
  
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentSlide = index;
      updateCarousel();
    });
  });
  
  // Add to cart functionality
  carousel.addEventListener('click', function(e) {
    if (e.target.classList.contains('add-to-cart-btn') && !e.target.disabled) {
      const button = e.target;
      const variantId = button.dataset.variantId;
      const variantTitle = button.dataset.variantTitle;
      const productTitle = button.dataset.productTitle;
      
      // Validate variant ID
      if (!variantId || variantId === 'undefined') {
        console.error('Invalid variant ID:', variantId);
        alert('This product variant is not available.');
        return;
      }
      
      // Disable button during request
      button.disabled = true;
      const originalText = button.textContent;
      button.textContent = 'Adding...';
      
      console.log('Adding to cart:', {
        variantId: variantId,
        variantTitle: variantTitle,
        productTitle: productTitle
      });
      
      // Try multiple approaches to add to cart
      const tryAddToCart = async () => {
        // Method 1: FormData approach
        const formData = new FormData();
        formData.append('id', variantId);
        formData.append('quantity', '1');
        
        let response = await fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          console.log('FormData method failed, trying JSON method...');
          
          // Method 2: JSON approach
          response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 1
            })
          });
        }
        
        return response;
      };
      
      tryAddToCart()
      .then(response => {
        console.log('Cart response status:', response.status);
        
        if (!response.ok) {
          return response.text().then(text => {
            console.error('Cart error response:', text);
            throw new Error(`HTTP ${response.status}: ${text}`);
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('Cart add success:', data);
        
        // Success - show feedback
        button.textContent = 'Added!';
        button.style.background = '#10b981';
        
        setTimeout(() => {
          button.textContent = originalText;
          button.style.background = '';
          button.disabled = false;
        }, 1500);
        
        // Trigger cart update events for themes
        document.dispatchEvent(new CustomEvent('cart:updated'));
        document.dispatchEvent(new CustomEvent('cart:refresh'));
        
        // Update cart count if element exists
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          fetch('/cart.js')
            .then(res => res.json())
            .then(cart => {
              cartCount.textContent = cart.item_count;
            })
            .catch(err => console.log('Could not update cart count:', err));
        }
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        
        // Reset button on error
        button.textContent = originalText;
        button.disabled = false;
        
        // Show user-friendly error based on error type
        let errorMessage = 'Sorry, this product could not be added to your cart.';
        
        if (error.message.includes('422')) {
          errorMessage = 'This product variant is not available or is sold out.';
        } else if (error.message.includes('Network')) {
          errorMessage = 'Network error. Please check your connection and try again.';
        }
        
        alert(errorMessage);
      });
    }
  });
  
  updateCarousel();
});
</script>

{% schema %}
{
  "name": "Product Carousel",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "carousel_title",
      "label": "Carousel Title",
      "default": "You may also like"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Products to display",
      "limit": 10
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_pagination",
      "label": "Show pagination dots",
      "default": true
    }
  ]
}
{% endschema %}
