{% comment %}
  Minimal A/B Test Redirect - Calls backend API for logic
  This file is much smaller and avoids the 100KB limit
{% endcomment %}

<script>
(function() {
  'use strict';
  
  // Configuration
  const API_BASE = 'https://ab-optimizer-app.onrender.com/app/api/ab-test-public';
  const PRODUCT_ID = {{ product.id }};
  
  // Global variables
  let currentTest = null;
  let currentVariant = null;
  
  // Initialize A/B test
  async function initializeABTest() {
    try {
      console.log('üöÄ Initializing A/B test for product:', PRODUCT_ID);
      
      const formData = new FormData();
      formData.append('action', 'getTest');
      formData.append('productId', PRODUCT_ID);
      
      console.log('üì° Calling API:', API_BASE);
      
      const response = await fetch(API_BASE, {
        method: 'POST',
        body: formData
      });
      
      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', response.headers);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const responseText = await response.text();
      console.log('üì• Response text:', responseText);
      
      let data;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå Failed to parse JSON:', parseError);
        console.error('‚ùå Response text was:', responseText);
        return;
      }
      
      console.log('üìä Parsed data:', data);
      
      if (data.test) {
        currentTest = data.test;
        currentVariant = data.variant;
        
        console.log('üéØ A/B Test initialized:', {
          testId: currentTest.id,
          name: currentTest.name,
          variant: currentVariant,
          template: currentTest.template
        });
        
        // Apply template changes
        applyTemplate(currentTest.template);
        
        // Log impression
        logEvent('impression');
      } else {
        console.log('‚ÑπÔ∏è No active A/B test found for this product');
      }
    } catch (error) {
      console.error('‚ùå A/B Test initialization failed:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        stack: error.stack
      });
    }
  }
  
  // Apply template changes
  function applyTemplate(template) {
    if (!template) return;
    
    try {
      // Parse template JSON
      const templateData = JSON.parse(template);
      
      // Apply changes based on template type
      if (templateData.type === 'product_badge') {
        applyProductBadge(templateData);
      } else if (templateData.type === 'social_proof') {
        applySocialProof(templateData);
      } else if (templateData.type === 'countdown_timer') {
        applyCountdownTimer(templateData);
      } else if (templateData.type === 'enhanced_star_rating') {
        applyEnhancedStarRating(templateData);
      } else if (templateData.type === 'progress_bar') {
        applyProgressBar(templateData);
      }
    } catch (error) {
      console.error('‚ùå Template application failed:', error);
    }
  }
  
  // Apply product badge
  function applyProductBadge(data) {
    const badge = document.createElement('div');
    badge.innerHTML = `
      <div style="
        position: absolute;
        top: 10px;
        right: 10px;
        background: ${data.backgroundColor || '#ff6b6b'};
        color: ${data.textColor || 'white'};
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      ">
        ${data.text || 'HOT SALE!'}
      </div>
    `;
    
    const productForm = document.querySelector('.product-form');
    if (productForm) {
      productForm.style.position = 'relative';
      productForm.appendChild(badge);
    }
  }
  
  // Apply social proof
  function applySocialProof(data) {
    const socialProof = document.createElement('div');
    socialProof.innerHTML = `
      <div style="
        background: ${data.backgroundColor || '#f8f9fa'};
        border: 1px solid ${data.borderColor || '#e9ecef'};
        border-radius: 8px;
        padding: 16px;
        margin: 16px 0;
        text-align: center;
        font-size: 14px;
        color: ${data.textColor || '#495057'};
      ">
        <span style="font-weight: bold;">üî• ${data.message || 'Join 1,234+ happy customers!'}</span>
      </div>
    `;
    
    const productForm = document.querySelector('.product-form');
    if (productForm) {
      productForm.appendChild(socialProof);
    }
  }
  
  // Apply countdown timer
  function applyCountdownTimer(data) {
    const timer = document.createElement('div');
    timer.innerHTML = `
      <div style="
        background: ${data.backgroundColor || '#dc3545'};
        color: ${data.textColor || 'white'};
        padding: 12px;
        border-radius: 8px;
        margin: 16px 0;
        text-align: center;
        font-weight: bold;
      ">
        <div>‚è∞ ${data.message || 'Limited Time Offer!'}</div>
        <div id="countdown-timer" style="font-size: 18px; margin-top: 8px;">
          ${data.endTime || '23:59:59'}
        </div>
      </div>
    `;
    
    const productForm = document.querySelector('.product-form');
    if (productForm) {
      productForm.appendChild(timer);
    }
  }
  
  // Apply enhanced star rating
  function applyEnhancedStarRating(data) {
    const rating = document.createElement('div');
    rating.innerHTML = `
      <div style="
        background: ${data.backgroundColor || '#fff3cd'};
        border: 1px solid ${data.borderColor || '#ffeaa7'};
        border-radius: 8px;
        padding: 12px;
        margin: 16px 0;
        text-align: center;
      ">
        <div style="color: #f39c12; font-size: 20px; margin-bottom: 8px;">
          ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
        </div>
        <div style="color: ${data.textColor || '#856404'}; font-size: 14px;">
          ${data.message || 'Rated 4.8/5 by 500+ customers'}
        </div>
      </div>
    `;
    
    const productForm = document.querySelector('.product-form');
    if (productForm) {
      productForm.appendChild(rating);
    }
  }
  
  // Apply progress bar
  function applyProgressBar(data) {
    const progress = document.createElement('div');
    progress.innerHTML = `
      <div style="
        background: ${data.backgroundColor || '#e9ecef'};
        border-radius: 8px;
        padding: 12px;
        margin: 16px 0;
      ">
        <div style="
          display: flex;
          justify-content: space-between;
          margin-bottom: 8px;
          font-size: 14px;
          color: ${data.textColor || '#495057'};
        ">
          <span>${data.message || 'Limited Stock'}</span>
          <span>${data.current || '15'}/${data.total || '50'}</span>
        </div>
        <div style="
          background: ${data.progressColor || '#28a745'};
          height: 8px;
          border-radius: 4px;
          width: ${((data.current || 15) / (data.total || 50)) * 100}%;
          transition: width 0.3s ease;
        "></div>
      </div>
    `;
    
    const productForm = document.querySelector('.product-form');
    if (productForm) {
      productForm.appendChild(progress);
    }
  }
  
  // Log events to backend
  async function logEvent(eventType) {
    if (!currentTest) return;
    
    try {
      const formData = new FormData();
      formData.append('action', 'logEvent');
      formData.append('testId', currentTest.id);
      formData.append('eventType', eventType);
      formData.append('variant', currentVariant);
      formData.append('productId', PRODUCT_ID);
      
      await fetch(API_BASE, {
        method: 'POST',
        body: formData
      });
      
      console.log(`üìä Event logged: ${eventType} for variant ${currentVariant}`);
    } catch (error) {
      console.error('‚ùå Event logging failed:', error);
    }
  }
  
  // Event listeners
  function setupEventListeners() {
    // Add to cart events
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-action="add-to-cart"], .btn--add-to-cart, button[name="add"]')) {
        logEvent('add_to_cart');
      }
    });
    
    // Checkout events
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-action="checkout"], .btn--checkout, a[href*="/cart"], a[href*="/checkout"]')) {
        logEvent('checkout_initiated');
      }
    });
    
    // Cart update events
    const cartForms = document.querySelectorAll('form[action*="/cart/add"]');
    cartForms.forEach(form => {
      form.addEventListener('submit', function() {
        logEvent('cart_update');
      });
    });
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      initializeABTest();
      setupEventListeners();
    });
  } else {
    initializeABTest();
    setupEventListeners();
  }
})();
</script> 