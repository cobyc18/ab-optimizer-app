import { json } from "@remix-run/node";
import { useLoaderData, useActionData, useSubmit } from "@remix-run/react";
import { useState } from "react";
import { authenticate } from "../shopify.server.js";

export const loader = async ({ request }) => {
  const { admin } = await authenticate.admin(request);
  
  // Get shop and theme info
  const shopRes = await admin.graphql(`query { shop { myshopifyDomain } }`);
  const shopJson = await shopRes.json();
  const shopDomain = shopJson.data.shop.myshopifyDomain;
  
  const themeRes = await admin.graphql(`query { themes(first: 5) { nodes { id name role } } }`);
  const themeJson = await themeRes.json();
  const mainTheme = themeJson.data.themes.nodes.find(t => t.role === "MAIN");
  const themeId = mainTheme?.id.replace("gid://shopify/OnlineStoreTheme/", "") || "";
  
  return json({ shopDomain, themeId });
};

export const action = async ({ request }) => {
  const { admin } = await authenticate.admin(request);
  const formData = await request.formData();
  const actionType = formData.get("actionType");
  
  if (actionType === "inject_section") {
    const sectionType = formData.get("sectionType");
    const sectionName = formData.get("sectionName");
    
    try {
      // Generate the section content based on type
      const sectionContent = generateSectionContent(sectionType, sectionName);
      
      // Create the section file in the theme
      const mutation = `
        mutation themeFileCreate($files: [FileCreateInput!]!) {
          themeFileCreate(files: $files) {
            files {
              key
            }
            userErrors {
              field
              message
            }
          }
        }
      `;
      
      const variables = {
        files: [{
          key: `sections/${sectionName}.liquid`,
          value: sectionContent
        }]
      };
      
      const response = await admin.graphql(mutation, { variables });
      const result = await response.json();
      
      if (result.data?.themeFileCreate?.userErrors?.length > 0) {
        return json({ 
          success: false, 
          error: result.data.themeFileCreate.userErrors[0].message 
        });
      }
      
      return json({ 
        success: true, 
        message: `Section ${sectionName} successfully added to your theme!`,
        sectionName
      });
      
    } catch (error) {
      return json({ 
        success: false, 
        error: `Failed to inject section: ${error.message}` 
      });
    }
  }
  
  return json({ success: false, error: "Invalid action" });
};

function generateSectionContent(sectionType, sectionName) {
  const widgetContent = generateWidgetContent(sectionType);
  
  return `{% comment %}
  ${sectionName} - Enhanced Widget Section
  Generated by AB Optimizer App
{% endcomment %}

<div class="ab-optimizer-section" id="ab-optimizer-${sectionName}">
  {% for block in section.blocks %}
    {% case block.type %}
      {% when 'widget' %}
        ${widgetContent}
    {% endcase %}
  {% endfor %}
</div>

<style>
  .ab-optimizer-section {
    margin: {{ section.settings.section_margin }}px 0;
    padding: {{ section.settings.section_padding }}px;
  }
  
  @media (max-width: 768px) {
    .ab-optimizer-section {
      margin: {{ section.settings.mobile_section_margin }}px 0;
      padding: {{ section.settings.mobile_section_padding }}px;
    }
  }
</style>

{% schema %}
{
  "name": "${sectionName}",
  "tag": "section",
  "class": "ab-optimizer-section",
  "settings": [
    {
      "type": "header",
      "content": "Section Layout"
    },
    {
      "type": "range",
      "id": "section_margin",
      "label": "Section Margin",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Section Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 20
    },
    {
      "type": "header",
      "content": "Mobile Layout"
    },
    {
      "type": "range",
      "id": "mobile_section_margin",
      "label": "Mobile Section Margin",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 10
    },
    {
      "type": "range",
      "id": "mobile_section_padding",
      "label": "Mobile Section Padding",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 10
    }
  ],
  "blocks": [
    {
      "type": "widget",
      "name": "Widget",
      "settings": ${generateWidgetSettings(sectionType)}
    }
  ],
  "presets": [
    {
      "name": "${sectionName}",
      "blocks": [
        {
          "type": "widget"
        }
      ]
    }
  ]
}
{% endschema %}`;
}

function generateWidgetContent(sectionType) {
  const content = {
    "product-badge": `
<div class="ab-optimizer-badge-widget" 
     style="
       display: inline-block;
       background: {{ block.settings.desktop_background | default: '#32cd32' }};
       color: {{ block.settings.desktop_text_color | default: '#ffffff' }};
       border: {{ block.settings.border_width | default: 1 }}px solid {{ block.settings.border_color | default: '#228b22' }};
       border-radius: {{ block.settings.desktop_border_radius | default: 4 }}px;
       padding: {{ block.settings.desktop_padding | default: 8 }}px;
       margin: {{ block.settings.desktop_margin | default: 4 }}px;
       font-size: {{ block.settings.desktop_font_size | default: 12 }}px;
       font-weight: {{ block.settings.font_weight | default: 'bold' }};
       text-transform: {{ block.settings.text_transform | default: 'uppercase' }};
       opacity: {{ block.settings.opacity | default: 1 }};
       {% if block.settings.enable_gradient %}
         background: linear-gradient({{ block.settings.gradient_angle | default: 45 }}deg, {{ block.settings.gradient_color_1 | default: '#32cd32' }}, {{ block.settings.gradient_color_2 | default: '#228b22' }}) !important;
       {% endif %}
     ">
  
  {% case block.settings.badge_type %}
    {% when 'custom' %}
      {{ block.settings.custom_text | default: 'SPECIAL' }}
    {% when 'sale' %}
      {% if product.compare_at_price > product.price %}
        {{ block.settings.sale_text | default: 'SALE' }}
      {% endif %}
    {% when 'new' %}
      {% assign product_age = 'now' | date: '%s' | minus: product.created_at | date: '%s' | divided_by: 86400 %}
      {% if product_age <= block.settings.new_product_days | default: 30 %}
        {{ block.settings.new_text | default: 'NEW' }}
      {% endif %}
    {% when 'limited' %}
      {% if product.available and product.inventory_quantity <= block.settings.limited_stock_threshold | default: 10 %}
        {{ block.settings.limited_text | default: 'LIMITED' }}
      {% endif %}
    {% when 'bestseller' %}
      {{ block.settings.bestseller_text | default: 'BESTSELLER' }}
    {% when 'trending' %}
      {{ block.settings.trending_text | default: 'TRENDING' }}
  {% endcase %}
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-badge-widget {
      font-size: {{ block.settings.mobile_font_size | default: 10 }}px !important;
      padding: {{ block.settings.mobile_padding | default: 6 }}px !important;
      margin: {{ block.settings.mobile_margin | default: 2 }}px !important;
      border-radius: {{ block.settings.mobile_border_radius | default: 3 }}px !important;
      background: {{ block.settings.mobile_background | default: block.settings.desktop_background }} !important;
      color: {{ block.settings.mobile_text_color | default: block.settings.desktop_text_color }} !important;
    }
  }
</style>`,

    "social-proof": `
<div class="ab-optimizer-social-proof-widget" 
     style="
       padding: {{ block.settings.desktop_padding | default: 16 }}px;
       background: {{ block.settings.desktop_background | default: '#f8f9fa' }};
       color: {{ block.settings.desktop_text_color | default: '#000000' }};
       border: {{ block.settings.border_width | default: 1 }}px solid {{ block.settings.border_color | default: '#e5e7eb' }};
       border-radius: {{ block.settings.desktop_border_radius | default: 8 }}px;
       margin: {{ block.settings.desktop_margin | default: 8 }}px 0;
       font-size: {{ block.settings.desktop_font_size | default: 14 }}px;
       text-align: {{ block.settings.text_align | default: 'left' }};
       opacity: {{ block.settings.opacity | default: 1 }};
     ">

  {% case block.settings.proof_type %}
    {% when 'recent_purchase' %}
      <span style="font-size: {{ block.settings.desktop_icon_size | default: 16 }}px;">üõí</span>
      <span style="margin-left: 8px;">
        {{ block.settings.recent_purchase_text | default: 'Someone in your area just purchased this 2 minutes ago' }}
      </span>
    {% when 'review_count' %}
      <span style="font-size: {{ block.settings.desktop_icon_size | default: 16 }}px;">‚≠ê</span>
      <span style="margin-left: 8px;">
        {{ block.settings.review_count_text | default: '1,234 happy customers' }}
      </span>
    {% when 'trust_badge' %}
      <span style="font-size: {{ block.settings.desktop_icon_size | default: 16 }}px;">üîí</span>
      <span style="margin-left: 8px;">
        {{ block.settings.trust_badge_text | default: '100% Secure Checkout' }}
      </span>
    {% when 'custom' %}
      <span style="font-size: {{ block.settings.desktop_icon_size | default: 16 }}px;">{{ block.settings.custom_icon | default: '‚ú®' }}</span>
      <span style="margin-left: 8px;">
        {{ block.settings.custom_message | default: 'Custom social proof message' }}
      </span>
  {% endcase %}
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-social-proof-widget {
      font-size: {{ block.settings.mobile_font_size | default: 12 }}px !important;
      padding: {{ block.settings.mobile_padding | default: 12 }}px !important;
      margin: {{ block.settings.mobile_margin | default: 8 }}px 0 !important;
      background: {{ block.settings.mobile_background | default: block.settings.desktop_background }} !important;
      color: {{ block.settings.mobile_text_color | default: block.settings.desktop_text_color }} !important;
      border-radius: {{ block.settings.mobile_border_radius | default: 8 }}px !important;
    }
  }
</style>`,

    "countdown-timer": `
<div class="ab-optimizer-countdown-widget" 
     style="
       text-align: center;
       padding: {{ block.settings.desktop_padding | default: 24 }}px;
       background: {{ block.settings.desktop_background | default: '#f8f9fa' }};
       color: {{ block.settings.desktop_text_color | default: '#000000' }};
       border: {{ block.settings.border_width | default: 1 }}px solid {{ block.settings.border_color | default: '#e5e7eb' }};
       border-radius: {{ block.settings.desktop_border_radius | default: 12 }}px;
       margin: {{ block.settings.desktop_margin | default: 8 }}px 0;
       font-size: {{ block.settings.desktop_font_size | default: 16 }}px;
       opacity: {{ block.settings.opacity | default: 1 }};
     ">

  {% if block.settings.show_message %}
    <div style="font-weight: {{ block.settings.message_font_weight | default: 'bold' }}; margin-bottom: 16px;">
      {{ block.settings.countdown_message | default: 'Limited Time Offer!' }}
    </div>
  {% endif %}

  <div id="countdown-{{ block.id }}" style="display: flex; justify-content: center; gap: 8px; margin: 16px 0;">
    <div style="display: flex; flex-direction: column; align-items: center; min-width: 60px;">
      <div style="
        background: {{ block.settings.time_unit_background | default: '#32cd32' }};
        color: {{ block.settings.time_unit_text_color | default: '#ffffff' }};
        border-radius: 8px;
        padding: 12px;
        font-weight: bold;
        font-size: {{ block.settings.desktop_time_value_font_size | default: 24 }}px;
      ">
        <span id="days-{{ block.id }}">00</span>
      </div>
      <div style="font-size: 12px; margin-top: 4px; opacity: 0.8;">{{ block.settings.days_label | default: 'Days' }}</div>
    </div>
    
    <div style="display: flex; flex-direction: column; align-items: center; min-width: 60px;">
      <div style="
        background: {{ block.settings.time_unit_background | default: '#32cd32' }};
        color: {{ block.settings.time_unit_text_color | default: '#ffffff' }};
        border-radius: 8px;
        padding: 12px;
        font-weight: bold;
        font-size: {{ block.settings.desktop_time_value_font_size | default: 24 }}px;
      ">
        <span id="hours-{{ block.id }}">00</span>
      </div>
      <div style="font-size: 12px; margin-top: 4px; opacity: 0.8;">{{ block.settings.hours_label | default: 'Hours' }}</div>
    </div>
    
    <div style="display: flex; flex-direction: column; align-items: center; min-width: 60px;">
      <div style="
        background: {{ block.settings.time_unit_background | default: '#32cd32' }};
        color: {{ block.settings.time_unit_text_color | default: '#ffffff' }};
        border-radius: 8px;
        padding: 12px;
        font-weight: bold;
        font-size: {{ block.settings.desktop_time_value_font_size | default: 24 }}px;
      ">
        <span id="minutes-{{ block.id }}">00</span>
      </div>
      <div style="font-size: 12px; margin-top: 4px; opacity: 0.8;">{{ block.settings.minutes_label | default: 'Minutes' }}</div>
    </div>
    
    <div style="display: flex; flex-direction: column; align-items: center; min-width: 60px;">
      <div style="
        background: {{ block.settings.time_unit_background | default: '#32cd32' }};
        color: {{ block.settings.time_unit_text_color | default: '#ffffff' }};
        border-radius: 8px;
        padding: 12px;
        font-weight: bold;
        font-size: {{ block.settings.desktop_time_value_font_size | default: 24 }}px;
      ">
        <span id="seconds-{{ block.id }}">00</span>
      </div>
      <div style="font-size: 12px; margin-top: 4px; opacity: 0.8;">{{ block.settings.seconds_label | default: 'Seconds' }}</div>
    </div>
  </div>

  <div id="expired-{{ block.id }}" style="display: none; font-size: 18px; font-weight: bold; color: #dc2626;">
    {{ block.settings.expired_message | default: 'This offer has expired!' }}
  </div>
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-countdown-widget {
      font-size: {{ block.settings.mobile_font_size | default: 12 }}px !important;
      padding: {{ block.settings.mobile_padding | default: 12 }}px !important;
      background: {{ block.settings.mobile_background | default: block.settings.desktop_background }} !important;
      color: {{ block.settings.mobile_text_color | default: block.settings.desktop_text_color }} !important;
      border-radius: {{ block.settings.mobile_border_radius | default: 8 }}px !important;
    }
  }
</style>

<script>
(function() {
  const blockId = '{{ block.id }}';
  const endDate = new Date('{{ block.settings.end_date | default: "2024-12-31T23:59:59" }}').getTime();
  
  function updateCountdown() {
    const now = new Date().getTime();
    const distance = endDate - now;
    
    if (distance < 0) {
      document.getElementById(\`countdown-\${blockId}\`).style.display = 'none';
      document.getElementById(\`expired-\${blockId}\`).style.display = 'block';
      return;
    }
    
    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);
    
    document.getElementById(\`days-\${blockId}\`).textContent = days.toString().padStart(2, '0');
    document.getElementById(\`hours-\${blockId}\`).textContent = hours.toString().padStart(2, '0');
    document.getElementById(\`minutes-\${blockId}\`).textContent = minutes.toString().padStart(2, '0');
    document.getElementById(\`seconds-\${blockId}\`).textContent = seconds.toString().padStart(2, '0');
  }
  
  updateCountdown();
  setInterval(updateCountdown, 1000);
})();
</script>`,

    "progress-bar": `
<div class="ab-optimizer-progress-widget" 
     style="
       padding: {{ block.settings.desktop_padding | default: 24 }}px;
       background: {{ block.settings.desktop_background | default: '#f8f9fa' }};
       color: {{ block.settings.desktop_text_color | default: '#000000' }};
       border: {{ block.settings.border_width | default: 1 }}px solid {{ block.settings.border_color | default: '#e5e7eb' }};
       border-radius: {{ block.settings.desktop_border_radius | default: 12 }}px;
       margin: {{ block.settings.desktop_margin | default: 8 }}px 0;
       font-size: {{ block.settings.desktop_font_size | default: 16 }}px;
       opacity: {{ block.settings.opacity | default: 1 }};
     ">

  {% if block.settings.show_header %}
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
      <div style="font-weight: {{ block.settings.label_font_weight | default: 'bold' }};">
        {{ block.settings.progress_label | default: 'Progress' }}
      </div>
      <div style="font-weight: {{ block.settings.percentage_font_weight | default: 'bold' }};">
        <span id="percentage-{{ block.id }}">{{ block.settings.progress_value | default: 75 }}%</span>
      </div>
    </div>
  {% endif %}

  <div style="position: relative; border-radius: 8px; overflow: hidden; box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);">
    <div style="height: {{ block.settings.progress_height | default: 12 }}px; background: {{ block.settings.progress_background | default: '#e5e7eb' }}; position: relative;">
      <div id="progress-fill-{{ block.id }}" style="
        height: 100%;
        background: {{ block.settings.progress_fill_color | default: '#32cd32' }};
        border-radius: 8px;
        width: {{ block.settings.progress_value | default: 75 }}%;
        transition: width 1s ease;
        position: relative;
      ">
        {% if block.settings.show_progress_text %}
          <div style="
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: {{ block.settings.progress_text_color | default: '#ffffff' }};
            font-weight: {{ block.settings.progress_text_font_weight | default: 'bold' }};
            font-size: {{ block.settings.progress_text_font_size | default: 12 }}px;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
          ">
            {{ block.settings.progress_value | default: 75 }}%
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  {% if block.settings.show_description %}
    <div style="margin-top: 8px; font-size: 14px; opacity: 0.8;">
      {{ block.settings.progress_description | default: 'This shows the current progress of your goal.' }}
    </div>
  {% endif %}
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-progress-widget {
      font-size: {{ block.settings.mobile_font_size | default: 12 }}px !important;
      padding: {{ block.settings.mobile_padding | default: 12 }}px !important;
      background: {{ block.settings.mobile_background | default: block.settings.desktop_background }} !important;
      color: {{ block.settings.mobile_text_color | default: block.settings.desktop_text_color }} !important;
      border-radius: {{ block.settings.mobile_border_radius | default: 8 }}px !important;
    }
  }
</style>

<script>
(function() {
  const blockId = '{{ block.id }}';
  const targetProgress = {{ block.settings.progress_value | default: 75 }};
  let currentStep = 0;
  
  function animateProgress() {
    if (currentStep < 100) {
      currentStep++;
      const newProgress = Math.min(currentStep, targetProgress);
      
      document.getElementById(\`progress-fill-\${blockId}\`).style.width = newProgress + '%';
      document.getElementById(\`percentage-\${blockId}\`).textContent = Math.round(newProgress) + '%';
      
      setTimeout(animateProgress, 20);
    }
  }
  
  setTimeout(animateProgress, 500);
})();
</script>`
  };
  
  return content[sectionType] || content["product-badge"];
}

function generateWidgetSettings(sectionType) {
  const settings = {
    "product-badge": [
      {
        "type": "header",
        "content": "Badge Content"
      },
      {
        "type": "select",
        "id": "badge_type",
        "label": "Badge Type",
        "options": [
          { "value": "custom", "label": "Custom Text" },
          { "value": "sale", "label": "Sale Badge" },
          { "value": "new", "label": "New Product" },
          { "value": "limited", "label": "Limited Stock" },
          { "value": "bestseller", "label": "Bestseller" },
          { "value": "trending", "label": "Trending" }
        ],
        "default": "custom"
      },
      {
        "type": "text",
        "id": "custom_text",
        "label": "Custom Badge Text",
        "default": "SPECIAL"
      },
      {
        "type": "header",
        "content": "Desktop Styling"
      },
      {
        "type": "color",
        "id": "desktop_background",
        "label": "Background Color",
        "default": "#32cd32"
      },
      {
        "type": "color",
        "id": "desktop_text_color",
        "label": "Text Color",
        "default": "#ffffff"
      },
      {
        "type": "range",
        "id": "desktop_font_size",
        "label": "Font Size",
        "min": 10,
        "max": 48,
        "step": 1,
        "default": 12
      },
      {
        "type": "range",
        "id": "desktop_padding",
        "label": "Padding",
        "min": 4,
        "max": 40,
        "step": 1,
        "default": 8
      },
      {
        "type": "range",
        "id": "desktop_border_radius",
        "label": "Border Radius",
        "min": 0,
        "max": 50,
        "step": 1,
        "default": 4
      },
      {
        "type": "header",
        "content": "Mobile Styling"
      },
      {
        "type": "color",
        "id": "mobile_background",
        "label": "Mobile Background",
        "default": "#32cd32"
      },
      {
        "type": "color",
        "id": "mobile_text_color",
        "label": "Mobile Text Color",
        "default": "#ffffff"
      },
      {
        "type": "range",
        "id": "mobile_font_size",
        "label": "Mobile Font Size",
        "min": 8,
        "max": 32,
        "step": 1,
        "default": 10
      },
      {
        "type": "range",
        "id": "mobile_padding",
        "label": "Mobile Padding",
        "min": 2,
        "max": 20,
        "step": 1,
        "default": 6
      },
      {
        "type": "range",
        "id": "mobile_border_radius",
        "label": "Mobile Border Radius",
        "min": 0,
        "max": 25,
        "step": 1,
        "default": 3
      },
      {
        "type": "header",
        "content": "Advanced Effects"
      },
      {
        "type": "checkbox",
        "id": "enable_gradient",
        "label": "Enable Gradient Background",
        "default": false
      },
      {
        "type": "range",
        "id": "opacity",
        "label": "Opacity",
        "min": 0.1,
        "max": 1,
        "step": 0.1,
        "default": 1
      }
    ],
    "social-proof": [
      {
        "type": "header",
        "content": "Social Proof Content"
      },
      {
        "type": "select",
        "id": "proof_type",
        "label": "Proof Type",
        "options": [
          { "value": "recent_purchase", "label": "Recent Purchase" },
          { "value": "review_count", "label": "Review Count" },
          { "value": "trust_badge", "label": "Trust Badge" },
          { "value": "custom", "label": "Custom Message" }
        ],
        "default": "recent_purchase"
      },
      {
        "type": "text",
        "id": "recent_purchase_text",
        "label": "Recent Purchase Text",
        "default": "Someone in your area just purchased this 2 minutes ago"
      },
      {
        "type": "text",
        "id": "review_count_text",
        "label": "Review Count Text",
        "default": "1,234 happy customers"
      },
      {
        "type": "text",
        "id": "trust_badge_text",
        "label": "Trust Badge Text",
        "default": "100% Secure Checkout"
      },
      {
        "type": "text",
        "id": "custom_message",
        "label": "Custom Message",
        "default": "Custom social proof message"
      },
      {
        "type": "header",
        "content": "Desktop Styling"
      },
      {
        "type": "color",
        "id": "desktop_background",
        "label": "Background Color",
        "default": "#f8f9fa"
      },
      {
        "type": "color",
        "id": "desktop_text_color",
        "label": "Text Color",
        "default": "#000000"
      },
      {
        "type": "range",
        "id": "desktop_font_size",
        "label": "Font Size",
        "min": 12,
        "max": 32,
        "step": 1,
        "default": 14
      },
      {
        "type": "range",
        "id": "desktop_padding",
        "label": "Padding",
        "min": 8,
        "max": 40,
        "step": 1,
        "default": 16
      },
      {
        "type": "header",
        "content": "Mobile Styling"
      },
      {
        "type": "color",
        "id": "mobile_background",
        "label": "Mobile Background",
        "default": "#f8f9fa"
      },
      {
        "type": "color",
        "id": "mobile_text_color",
        "label": "Mobile Text Color",
        "default": "#000000"
      },
      {
        "type": "range",
        "id": "mobile_font_size",
        "label": "Mobile Font Size",
        "min": 10,
        "max": 24,
        "step": 1,
        "default": 12
      },
      {
        "type": "range",
        "id": "mobile_padding",
        "label": "Mobile Padding",
        "min": 6,
        "max": 20,
        "step": 1,
        "default": 12
      }
    ]
  };
  
  return JSON.stringify(settings[sectionType] || settings["product-badge"]);
}

export default function InjectSection() {
  const { shopDomain, themeId } = useLoaderData();
  const actionData = useActionData();
  const submit = useSubmit();
  const [selectedSection, setSelectedSection] = useState("");
  const [sectionName, setSectionName] = useState("");
  const [isInjecting, setIsInjecting] = useState(false);

  const sections = [
    {
      id: "product-badge",
      name: "Enhanced Product Badge",
      description: "Advanced product badges with 30+ settings for desktop and mobile",
      icon: "üè∑Ô∏è",
      settings: "30+ settings"
    },
    {
      id: "social-proof",
      name: "Enhanced Social Proof",
      description: "Social proof widgets with extensive customization options",
      icon: "‚≠ê",
      settings: "25+ settings"
    },
    {
      id: "countdown-timer",
      name: "Enhanced Countdown Timer",
      description: "Advanced countdown timers with multiple styles and animations",
      icon: "‚è∞",
      settings: "35+ settings"
    },
    {
      id: "progress-bar",
      name: "Enhanced Progress Bar",
      description: "Progress bars with multiple styles and customization options",
      icon: "üìä",
      settings: "20+ settings"
    }
  ];

  const handleInjectSection = async () => {
    if (!selectedSection || !sectionName) return;
    
    setIsInjecting(true);
    const formData = new FormData();
    formData.append("actionType", "inject_section");
    formData.append("sectionType", selectedSection);
    formData.append("sectionName", sectionName);
    
    submit(formData, { method: "post" });
  };

  const handleOpenThemeEditor = (sectionName) => {
    const themeEditorUrl = `https://admin.shopify.com/store/${shopDomain}/themes/${themeId}/editor?previewPath=/products/sample-product&addAppBlockId=ab-optimizer-${sectionName}`;
    window.open(themeEditorUrl, '_blank');
  };

  return (
    <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
      <div style={{ 
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',
        color: 'white',
        padding: '32px',
        borderRadius: '16px',
        marginBottom: '32px'
      }}>
        <h1 style={{ fontSize: '32px', fontWeight: 'bold', marginBottom: '16px' }}>
          üöÄ Enhanced Section Injector
        </h1>
        <p style={{ fontSize: '18px', opacity: 0.9, lineHeight: '1.6' }}>
          Add powerful sections to your theme with 30+ settings for desktop and mobile. 
          These sections will be injected directly into your theme codebase, giving you 
          extensive customization options while staying within Shopify's size limits.
        </p>
      </div>

      {actionData && (
        <div style={{
          padding: '16px',
          borderRadius: '12px',
          marginBottom: '24px',
          background: actionData.success
            ? 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)'
            : 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)',
          color: 'white',
          fontSize: '16px',
          textAlign: 'center'
        }}>
          {actionData.success ? '‚úÖ ' : '‚ùå '}
          {actionData.message || actionData.error}
        </div>
      )}

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '24px', marginBottom: '32px' }}>
        {sections.map((section) => (
          <div key={section.id} style={{
            background: 'white',
            borderRadius: '16px',
            padding: '24px',
            border: '2px solid #e5e7eb',
            transition: 'all 0.3s ease',
            cursor: 'pointer'
          }}
          onClick={() => setSelectedSection(section.id)}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-4px)';
            e.currentTarget.style.boxShadow = '0 20px 25px -5px rgba(0, 0, 0, 0.1)';
            e.currentTarget.style.borderColor = '#32cd32';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
            e.currentTarget.style.borderColor = '#e5e7eb';
          }}>
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
              <span style={{ fontSize: '32px', marginRight: '12px' }}>{section.icon}</span>
              <div>
                <h3 style={{ fontSize: '20px', fontWeight: 'bold', margin: '0 0 4px 0' }}>
                  {section.name}
                </h3>
                <span style={{ 
                  fontSize: '12px', 
                  background: 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                  color: 'white',
                  padding: '4px 8px',
                  borderRadius: '12px',
                  fontWeight: '600'
                }}>
                  {section.settings}
                </span>
              </div>
            </div>
            <p style={{ color: '#6b7280', lineHeight: '1.5', margin: '0 0 16px 0' }}>
              {section.description}
            </p>
            {selectedSection === section.id && (
              <div style={{
                background: 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                color: 'white',
                padding: '8px 16px',
                borderRadius: '8px',
                textAlign: 'center',
                fontWeight: '600'
              }}>
                ‚úì Selected
              </div>
            )}
          </div>
        ))}
      </div>

      {selectedSection && (
        <div style={{
          background: 'white',
          borderRadius: '16px',
          padding: '32px',
          border: '2px solid #32cd32'
        }}>
          <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '24px' }}>
            Inject Section to Theme
          </h2>
          
          <div style={{ marginBottom: '24px' }}>
            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600' }}>
              Section Name (will be used in theme editor):
            </label>
            <input
              type="text"
              value={sectionName}
              onChange={(e) => setSectionName(e.target.value)}
              placeholder="e.g., enhanced-product-badge, my-custom-widget"
              style={{
                width: '100%',
                padding: '12px 16px',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '16px'
              }}
            />
          </div>

          <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>
            <button
              onClick={handleInjectSection}
              disabled={!sectionName || isInjecting}
              style={{
                padding: '16px 32px',
                background: isInjecting || !sectionName
                  ? '#9ca3af'
                  : 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                fontSize: '16px',
                fontWeight: '600',
                cursor: isInjecting || !sectionName ? 'not-allowed' : 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              {isInjecting ? 'üîÑ Injecting...' : 'üöÄ Inject Section'}
            </button>

            {actionData?.success && (
              <button
                onClick={() => handleOpenThemeEditor(sectionName)}
                style={{
                  padding: '16px 32px',
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '12px',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
              >
                üé® Open in Theme Editor
              </button>
            )}
          </div>

          <div style={{ 
            marginTop: '24px', 
            padding: '16px', 
            background: '#f8f9fa', 
            borderRadius: '8px',
            fontSize: '14px',
            color: '#6b7280'
          }}>
            <strong>What happens next:</strong>
            <ul style={{ margin: '8px 0 0 20px' }}>
              <li>The section will be added to your theme's sections folder</li>
              <li>You can then add it to any page via the theme editor</li>
              <li>Each section comes with 30+ settings for desktop and mobile</li>
              <li>Settings are organized into logical groups for easy customization</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
} 