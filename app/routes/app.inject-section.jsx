import { json } from "@remix-run/node";
import { useLoaderData, useActionData, useSubmit } from "@remix-run/react";
import { useState } from "react";
import { authenticate } from "../shopify.server.js";

export const loader = async ({ request }) => {
  const { admin } = await authenticate.admin(request);
  
  try {
    // Get shop and theme info
    const shopRes = await admin.graphql(`query { shop { myshopifyDomain } }`);
    const shopJson = await shopRes.json();
    const shopDomain = shopJson.data.shop.myshopifyDomain;
    
    const themeRes = await admin.graphql(`query { themes(first: 10) { nodes { id name role } } }`);
    const themeJson = await themeRes.json();
    const themes = themeJson.data.themes.nodes;
    
    console.log("üîç Available themes:", themes);
    
    return json({ 
      shopDomain, 
      themes,
      mainTheme: themes.find(t => t.role === "MAIN"),
      publishedTheme: themes.find(t => t.role === "PUBLISHED"),
      message: "Snippet injection using Assets API - works with standard app permissions!"
    });
  } catch (error) {
    console.error("‚ùå Error in loader:", error);
    return json({ 
      shopDomain: "", 
      themes: [],
      error: error.message 
    });
  }
};

export const action = async ({ request }) => {
  const { admin } = await authenticate.admin(request);
  const formData = await request.formData();
  const actionType = formData.get("actionType");
  
  console.log("üöÄ Action triggered:", actionType);
  
  if (actionType === "inject_snippet") {
    const sectionType = formData.get("sectionType");
    const sectionName = formData.get("sectionName");
    const themeId = formData.get("themeId");
    
    console.log("üìù Injecting snippet:", { sectionType, sectionName, themeId });
    
    try {
      // Generate the snippet content based on type
      const snippetContent = generateSnippetContent(sectionType, sectionName);
      console.log("üìÑ Generated snippet content length:", snippetContent.length);
      
      // Extract numeric theme ID from GID
      const themeIdNumeric = themeId.replace("gid://shopify/OnlineStoreTheme/", "");
      console.log("üé® Using theme ID:", themeIdNumeric);
      
      // Try to create the snippet file using Assets API REST
      try {
        const response = await admin.rest.put({
          path: `themes/${themeIdNumeric}/assets`,
          data: {
            asset: {
              key: `snippets/${sectionName}.liquid`,
              value: snippetContent
            }
          }
        });
        
        console.log("‚úÖ Snippet created successfully via API:", response.body.asset.key);
        
        return json({ 
          success: true, 
          message: `Snippet ${sectionName} successfully added to your theme via API!`,
          sectionName,
          themeId: themeIdNumeric,
          snippetKey: response.body.asset.key,
          instructions: getSnippetInstructions(sectionName),
          method: "api"
        });
        
      } catch (apiError) {
        console.log("‚ö†Ô∏è Assets API failed, providing manual installation option:", apiError.message);
        
        // Fallback: Provide the code for manual installation
        return json({ 
          success: true, 
          message: `Assets API requires special permissions. Here's the snippet code for manual installation:`,
          sectionName,
          themeId: themeIdNumeric,
          snippetContent,
          instructions: getManualInstallInstructions(sectionName),
          method: "manual"
        });
      }
      
    } catch (error) {
      console.error("‚ùå Error generating snippet:", error);
      
      // Try to get more detailed error information
      let errorDetails = error.message;
      if (error.response) {
        try {
          const errorBody = await error.response.text();
          console.error("‚ùå Error response body:", errorBody);
          errorDetails = `HTTP ${error.response.status}: ${errorBody}`;
        } catch (e) {
          errorDetails = `HTTP ${error.response.status}: ${error.message}`;
        }
      }
      
      return json({ 
        success: false, 
        error: `Failed to generate snippet: ${errorDetails}`,
        details: error.stack
      });
    }
  }
  
  return json({ success: false, error: "Invalid action" });
};

function generateSnippetContent(sectionType, sectionName) {
  console.log("üîß Generating snippet content for:", sectionType, sectionName);
  
  const widgetContent = generateWidgetContent(sectionType);
  
  return `{% comment %}
  ${sectionName} - Enhanced Widget Snippet
  Generated by AB Optimizer App
  This snippet can be included in any section or template
{% endcomment %}

<div class="ab-optimizer-snippet" id="ab-optimizer-${sectionName}">
  ${widgetContent}
</div>

<style>
  .ab-optimizer-snippet {
    margin: 0;
    padding: 0;
  }
  
  /* Desktop styles */
  @media (min-width: 769px) {
    .ab-optimizer-snippet {
      /* Desktop-specific styles can be added here */
    }
  }
  
  /* Mobile styles */
  @media (max-width: 768px) {
    .ab-optimizer-snippet {
      /* Mobile-specific styles can be added here */
    }
  }
</style>`;
}

function generateWidgetContent(sectionType) {
  console.log("üé® Generating widget content for:", sectionType);
  
  const content = {
    "product-badge": `
<div class="ab-optimizer-badge-widget" 
     style="
       display: inline-block;
       background: #32cd32;
       color: #ffffff;
       border: 1px solid #228b22;
       border-radius: 4px;
       padding: 8px;
       margin: 4px;
       font-size: 12px;
       font-weight: bold;
       text-transform: uppercase;
       opacity: 1;
     ">
  
  {% if product.compare_at_price > product.price %}
    SALE
  {% else %}
    {% assign product_age = 'now' | date: '%s' | minus: product.created_at | date: '%s' | divided_by: 86400 %}
    {% if product_age <= 30 %}
      NEW
    {% else %}
      {% if product.available and product.inventory_quantity <= 10 %}
        LIMITED
      {% else %}
        SPECIAL
      {% endif %}
    {% endif %}
  {% endif %}
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-badge-widget {
      font-size: 10px !important;
      padding: 6px !important;
      margin: 2px !important;
      border-radius: 3px !important;
    }
  }
</style>`,

    "social-proof": `
<div class="ab-optimizer-social-proof-widget" 
     style="
       padding: 16px;
       background: #f8f9fa;
       color: #000000;
       border: 1px solid #e5e7eb;
       border-radius: 8px;
       margin: 8px 0;
       font-size: 14px;
       text-align: left;
       opacity: 1;
     ">

  <span style="font-size: 16px;">üõí</span>
  <span style="margin-left: 8px;">
    Someone in your area just purchased this 2 minutes ago
  </span>
</div>

<style>
  @media (max-width: 768px) {
    .ab-optimizer-social-proof-widget {
      font-size: 12px !important;
      padding: 12px !important;
      margin: 8px 0 !important;
    }
  }
</style>`
  };
  
  return content[sectionType] || content["product-badge"];
}

function getSnippetInstructions(sectionName) {
  return [
    "1. The snippet has been successfully added to your theme!",
    "2. To use this snippet in any section or template, add:",
    `   {% render '${sectionName}' %}`,
    "3. You can also pass parameters to customize it:",
    `   {% render '${sectionName}', custom_param: 'value' %}`,
    "4. The snippet will automatically adapt to desktop and mobile",
    "5. You can find it in your theme's snippets folder",
    "6. To customize further, edit the snippet file directly in your theme"
  ];
}

function getManualInstallInstructions(sectionName) {
  return [
    "1. Copy the snippet code below",
    "2. Go to your Shopify admin ‚Üí Online Store ‚Üí Themes",
    "3. Click 'Actions' ‚Üí 'Edit code' on your theme",
    "4. In the left sidebar, click 'Snippets'",
    "5. Click 'Add a new snippet'",
    `6. Name it: ${sectionName}`,
    "7. Paste the code below into the snippet file",
    "8. Click 'Save'",
    "9. To use the snippet, add this to any template:",
    `   {% render '${sectionName}' %}`
  ];
}

export default function InjectSection() {
  const { shopDomain, themes, mainTheme, publishedTheme, message, error } = useLoaderData();
  const actionData = useActionData();
  const submit = useSubmit();
  const [selectedSection, setSelectedSection] = useState("");
  const [sectionName, setSectionName] = useState("");
  const [selectedThemeId, setSelectedThemeId] = useState("");
  const [isInjecting, setIsInjecting] = useState(false);

  const sections = [
    {
      id: "product-badge",
      name: "Enhanced Product Badge",
      description: "Smart product badges that automatically show SALE, NEW, LIMITED, or SPECIAL",
      icon: "üè∑Ô∏è",
      settings: "Auto-detecting"
    },
    {
      id: "social-proof",
      name: "Enhanced Social Proof",
      description: "Social proof widget with recent purchase notifications",
      icon: "‚≠ê",
      settings: "Ready to use"
    }
  ];

  const handleInjectSnippet = async () => {
    if (!selectedSection || !sectionName || !selectedThemeId) {
      console.log("‚ùå Missing required fields:", { selectedSection, sectionName, selectedThemeId });
      return;
    }
    
    console.log("üöÄ Starting snippet injection:", { selectedSection, sectionName, selectedThemeId });
    setIsInjecting(true);
    
    const formData = new FormData();
    formData.append("actionType", "inject_snippet");
    formData.append("sectionType", selectedSection);
    formData.append("sectionName", sectionName);
    formData.append("themeId", selectedThemeId);
    
    submit(formData, { method: "post" });
  };

  const handleOpenThemeEditor = (sectionName, themeId) => {
    const themeIdNumeric = themeId.replace("gid://shopify/OnlineStoreTheme/", "");
    const themeEditorUrl = `https://admin.shopify.com/store/${shopDomain}/themes/${themeIdNumeric}/editor`;
    console.log("üé® Opening theme editor:", themeEditorUrl);
    window.open(themeEditorUrl, '_blank');
  };

  if (error) {
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <div style={{ 
          background: 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)',
          color: 'white',
          padding: '32px',
          borderRadius: '16px'
        }}>
          <h1 style={{ fontSize: '24px', marginBottom: '16px' }}>‚ùå Error Loading Page</h1>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
      <div style={{ 
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',
        color: 'white',
        padding: '32px',
        borderRadius: '16px',
        marginBottom: '32px'
      }}>
        <h1 style={{ fontSize: '32px', fontWeight: 'bold', marginBottom: '16px' }}>
          üöÄ Snippet Injector (Assets API)
        </h1>
        <p style={{ fontSize: '18px', opacity: 0.9, lineHeight: '1.6' }}>
          {message}
        </p>
        <div style={{ 
          marginTop: '16px', 
          padding: '16px', 
          background: 'rgba(255,255,255,0.1)', 
          borderRadius: '8px',
          fontSize: '14px'
        }}>
          <strong>Why Snippets with Assets API?</strong>
          <ul style={{ margin: '8px 0 0 20px', opacity: 0.9 }}>
            <li>‚úÖ Works with standard app permissions</li>
            <li>‚úÖ No special Shopify exemptions required</li>
            <li>‚úÖ Can be included in any section or template</li>
            <li>‚úÖ Reusable across your entire theme</li>
            <li>‚úÖ Easy to customize and maintain</li>
          </ul>
        </div>
      </div>

      {actionData && (
        <div style={{
          padding: '16px',
          borderRadius: '12px',
          marginBottom: '24px',
          background: actionData.success
            ? 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)'
            : 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)',
          color: 'white',
          fontSize: '16px',
          textAlign: 'center'
        }}>
          {actionData.success ? '‚úÖ ' : '‚ùå '}
          {actionData.message || actionData.error}
          {actionData.details && (
            <details style={{ marginTop: '8px', textAlign: 'left' }}>
              <summary>Debug Details</summary>
              <pre style={{ fontSize: '12px', whiteSpace: 'pre-wrap' }}>{actionData.details}</pre>
            </details>
          )}
        </div>
      )}

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '24px', marginBottom: '32px' }}>
        {sections.map((section) => (
          <div key={section.id} style={{
            background: 'white',
            borderRadius: '16px',
            padding: '24px',
            border: '2px solid #e5e7eb',
            transition: 'all 0.3s ease',
            cursor: 'pointer'
          }}
          onClick={() => setSelectedSection(section.id)}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-4px)';
            e.currentTarget.style.boxShadow = '0 20px 25px -5px rgba(0, 0, 0, 0.1)';
            e.currentTarget.style.borderColor = '#32cd32';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
            e.currentTarget.style.borderColor = '#e5e7eb';
          }}>
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
              <span style={{ fontSize: '32px', marginRight: '12px' }}>{section.icon}</span>
              <div>
                <h3 style={{ fontSize: '20px', fontWeight: 'bold', margin: '0 0 4px 0' }}>
                  {section.name}
                </h3>
                <span style={{ 
                  fontSize: '12px', 
                  background: 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                  color: 'white',
                  padding: '4px 8px',
                  borderRadius: '12px',
                  fontWeight: '600'
                }}>
                  {section.settings}
                </span>
              </div>
            </div>
            <p style={{ color: '#6b7280', lineHeight: '1.5', margin: '0 0 16px 0' }}>
              {section.description}
            </p>
            {selectedSection === section.id && (
              <div style={{
                background: 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                color: 'white',
                padding: '8px 16px',
                borderRadius: '8px',
                textAlign: 'center',
                fontWeight: '600'
              }}>
                ‚úì Selected
              </div>
            )}
          </div>
        ))}
      </div>

      {selectedSection && (
        <div style={{
          background: 'white',
          borderRadius: '16px',
          padding: '32px',
          border: '2px solid #32cd32'
        }}>
          <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '24px' }}>
            Inject Snippet to Theme
          </h2>
          
          <div style={{ marginBottom: '24px' }}>
            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600' }}>
              Select Theme:
            </label>
            <select
              value={selectedThemeId}
              onChange={(e) => setSelectedThemeId(e.target.value)}
              style={{
                width: '100%',
                padding: '12px 16px',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '16px'
              }}
            >
              <option value="">Select a theme...</option>
              {themes.map((theme) => (
                <option key={theme.id} value={theme.id}>
                  {theme.name} {theme.role === "MAIN" ? "(Main)" : theme.role === "PUBLISHED" ? "(Published)" : ""}
                </option>
              ))}
            </select>
          </div>
          
          <div style={{ marginBottom: '24px' }}>
            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600' }}>
              Snippet Name (will be used as filename):
            </label>
            <input
              type="text"
              value={sectionName}
              onChange={(e) => setSectionName(e.target.value)}
              placeholder="e.g., enhanced-product-badge, my-custom-widget"
              style={{
                width: '100%',
                padding: '12px 16px',
                border: '2px solid #e5e7eb',
                borderRadius: '8px',
                fontSize: '16px'
              }}
            />
          </div>

          <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>
            <button
              onClick={handleInjectSnippet}
              disabled={!sectionName || !selectedThemeId || isInjecting}
              style={{
                padding: '16px 32px',
                background: isInjecting || !sectionName || !selectedThemeId
                  ? '#9ca3af'
                  : 'linear-gradient(135deg, #32cd32 0%, #228b22 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                fontSize: '16px',
                fontWeight: '600',
                cursor: isInjecting || !sectionName || !selectedThemeId ? 'not-allowed' : 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              {isInjecting ? 'üîÑ Injecting...' : 'üöÄ Inject Snippet'}
            </button>

            {actionData?.success && (
              <button
                onClick={() => handleOpenThemeEditor(sectionName, selectedThemeId)}
                style={{
                  padding: '16px 32px',
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '12px',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
              >
                üé® Open Theme Editor
              </button>
            )}
          </div>

          {actionData?.success && actionData.instructions && (
            <div style={{ 
              marginTop: '24px', 
              padding: '16px', 
              background: '#f8f9fa', 
              borderRadius: '8px',
              fontSize: '14px',
              color: '#6b7280'
            }}>
              <strong>How to use this snippet:</strong>
              <ul style={{ margin: '8px 0 0 20px' }}>
                {actionData.instructions.map((instruction, index) => (
                  <li key={index} style={{ marginBottom: '4px' }}>{instruction}</li>
                ))}
              </ul>
            </div>
          )}

          {actionData?.success && actionData.method === "manual" && actionData.snippetContent && (
            <div style={{ marginTop: '24px' }}>
              <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '16px' }}>
                üìÑ Snippet Code for Manual Installation
              </h3>
              <div style={{
                background: '#1a1a1a',
                color: '#00ff00',
                padding: '16px',
                borderRadius: '8px',
                fontFamily: 'monospace',
                fontSize: '12px',
                overflow: 'auto',
                maxHeight: '400px',
                border: '1px solid #333'
              }}>
                <pre style={{ margin: 0, whiteSpace: 'pre-wrap' }}>
                  {actionData.snippetContent}
                </pre>
              </div>
              
              <button
                onClick={() => {
                  navigator.clipboard.writeText(actionData.snippetContent);
                  alert('Snippet code copied to clipboard!');
                }}
                style={{
                  marginTop: '16px',
                  padding: '12px 24px',
                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: '600',
                  cursor: 'pointer'
                }}
              >
                üìã Copy Snippet Code
              </button>
            </div>
          )}

          <div style={{ 
            marginTop: '24px', 
            padding: '16px', 
            background: '#f8f9fa', 
            borderRadius: '8px',
            fontSize: '14px',
            color: '#6b7280'
          }}>
            <strong>What happens next:</strong>
            <ul style={{ margin: '8px 0 0 20px' }}>
              <li>The snippet will be added to your theme's snippets folder</li>
              <li>You can include it in any section or template using the render tag</li>
              <li>Snippets are reusable and can be customized with parameters</li>
              <li>They automatically adapt to desktop and mobile layouts</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
} 